 /* 
Color pallete. This section defines variables for the color pallete,
so that we can refer to particular colors by name instead of hexadecimal values.
This is applied to the 'root' psuedo-element, which just means that these color
variables are available to be used anywhere in our html document
*/
:root {
    --white-font: #FFFFFF;
    --black-font: #000000;
    --colour1: #03045E;
    --colour2: #CAF0F8;
}

/* Defines the main container size, we are limiting to 72em max and centring in the viewport */
.main-container {
    max-width: 72em;
    margin: 0 auto;
    font-family: Inter;
    color: var(--white-font);
}

/* Here we define the aspects of style of our elements other than their grid layout */
.banner {
    background-color: var(--colour1);
    padding: 1em;
}

.banner-title {
    font-size: 3em;
}

.banner-subtitle {
    font-size: 2.25em;
    padding-left: .2rem;
}

.card {
    background-color: var(--colour2);
    font-size: 1rem;
    display: flex;
    flex-direction: column;
    border-radius: 1em; /* This curves the corners of the container */
}

.card-image {
    width: 100%;
    height: 24em;
    object-fit: cover; /* This stops the images from being stretched to fill the area */
    border-radius: 1em 1em 0 0; /* This curves the top 2 corners of the image */
}

.card-blurb {
    padding: 1em;
    text-align: center;
    color: var(--black-font);
}

.footer {
    background-color: var(--colour1);
    font-size: 20px;
    text-align: center;
}

#cardImage7 {
    object-position: 50% 70%; /* This changes the anchor point on image7 */ 
}

/* Now we create names for the grid areas for specific elements */
#banner {
    grid-area: ban;
}

#card1 {
    grid-area: c1;
}

#card2 {
    grid-area: c2;
}

#card3 {
    grid-area: c3;
}

#card4 {
    grid-area: c4;
}

#card5 {
    grid-area: c5;
}

#card6 {
    grid-area: c6;
}

#card7 {
    grid-area: c7;
}

#card8 {
    grid-area: c8;
}

#footer {
    grid-area: foo;
}

/* Use a flexible layout grid */
.main-container {
    display: grid;
    column-gap: 1em;
}
  
/* 
Responsive Layout breakpoints. We start 'mobile-first' i.e. we define how the layout should look
for the smallest screen sizes. In this case we want a single column that spans the main container.
Because this CSS definition comes first, it will apply by default. Then we override it below with 
media queries for progressively bigger screen widths
*/
.main-container {
    grid-template:
        "ban ban ban ban" minmax(6em, auto)
        " .   .   .   . " minmax(2em, auto)
        " c1  c1  c1  c1" minmax(30em, auto)
        " .   .   .   . " minmax(2em, auto)
        " c2  c2  c2  c2" minmax(30em, auto)
        " .   .   .   . " minmax(2em, auto)
        " c3  c3  c3  c3" minmax(30em, auto)
        " .   .   .   . " minmax(2em, auto)
        " c4  c4  c4  c4" minmax(30em, auto)
        " .   .   .   . " minmax(2em, auto)
        " c5  c5  c5  c5" minmax(30em, auto)
        " .   .   .   . " minmax(2em, auto)
        " c6  c6  c6  c6" minmax(30em, auto)
        " .   .   .   . " minmax(2em, auto)
        " c7  c7  c7  c7" minmax(30em, auto)
        " .   .   .   . " minmax(2em, auto)
        " c8  c8  c8  c8" minmax(30em, auto)
        " .   .   .   . " minmax(2em, auto)
        "foo foo foo foo" minmax(6em, auto);
}

@media (min-width: 50em) {
    .main-container {
        grid-template:
            "ban ban ban ban ban ban ban ban" minmax(8em, auto)
            " .   .   .   .   .   .   .   . " minmax(2em, auto)
            " c1  c1  c1  c1  c2  c2  c2  c2" minmax(30em, auto)
            " .   .   .   .   .   .   .   . " minmax(2em, auto)
            " c3  c3  c3  c3  c4  c4  c4  c4" minmax(30em, auto)
            " .   .   .   .   .   .   .   . " minmax(2em, auto)
            " c5  c5  c5  c5  c6  c6  c6  c6" minmax(30em, auto)
            " .   .   .   .   .   .   .   . " minmax(2em, auto)
            " c7  c7  c7  c7  c8  c8  c8  c8" minmax(30em, auto)
            " .   .   .   .   .   .   .   . " minmax(2em, auto)
            "foo foo foo foo foo foo foo foo" minmax(6em, auto);
    }
}

@media (min-width: 75em) {
    .main-container {
        grid-template:
            "ban ban ban ban ban ban ban ban ban ban ban ban" minmax(8em, auto)
            " .   .   .   .   .   .   .   .   .   .   .   . " minmax(2em, auto)
            " c1  c1  c1  c1  c1  c1  c2  c2  c2  c2  c2  c2" minmax(30em, auto)
            " .   .   .   .   .   .   .   .   .   .   .   . " minmax(2em, auto)
            " c3  c3  c3  c3  c3  c3  c4  c4  c4  c4  c4  c4" minmax(30em, auto)
            " .   .   .   .   .   .   .   .   .   .   .   . " minmax(2em, auto)
            " c5  c5  c5  c5  c5  c5  c6  c6  c6  c6  c6  c6" minmax(30em, auto)
            " .   .   .   .   .   .   .   .   .   .   .   . " minmax(2em, auto)
            " c7  c7  c7  c7  c7  c7  c8  c8  c8  c8  c8  c8" minmax(30em, auto)
            " .   .   .   .   .   .   .   .   .   .   .   . " minmax(2em, auto)
            "foo foo foo foo foo foo foo foo foo foo foo foo" minmax(6em, auto);
    }
}
